
























// const mongoose = require('mongoose');
// const bcrypt = require('bcrypt');

// const MONGO_URI = 'mongodb://127.0.0.1:27017/event_db'; // MongoDB URL

// // Connect to MongoDB
// mongoose.connect(MONGO_URI)
//     .then(() => console.log("✅ Connected to MongoDB"))
//     .catch(err => console.error("❌ MongoDB Connection Error:", err))
//     .finally(() => console.log("🔄 MongoDB Connection Attempt Finished"));

// // Define User Schema
// const userSchema = new mongoose.Schema({
//     name: { type: String, required: true },
//     email: { type: String, required: true, unique: true },
//     password: { type: String, required: true }, // Store hashed password
//     created_at: { type: Date, default: Date.now } // Default timestamp
// });

// // Hash password before saving
// userSchema.pre('save', async function (next) {
//     if (!this.isModified('password')) return next();

//     try {
//         const salt = await bcrypt.genSalt(10);
//         this.password = await bcrypt.hash(this.password, salt);
//         next();
//     } catch (error) {
//         next(error);
//     }
// });

// // Create User Model
// const User = mongoose.model('User', userSchema);

// module.exports = { mongoose, User };





























































import React from 'react';
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';
import RegisterForm from '../components/RegisterForm';

const Register: React.FC = () => {
  return (
    <div className="min-h-screen flex flex-col">
      <Navbar />
      
      <main className="flex-grow pt-20">
        {/* Registration Header */}
        <section className="py-16 bg-gradient-to-r from-purple-100/50 to-tech-100/50">
          <div className="container mx-auto px-4">
            <div className="text-center max-w-3xl mx-auto mb-12 animate-fade-in opacity-0" style={{ animationDelay: '0.2s', animationFillMode: 'forwards' }}>
              <div className="inline-block mb-4">
                <span className="inline-block px-3 py-1 text-xs font-semibold tracking-wider text-tech-700 bg-tech-100 rounded-full">
                  JOIN US
                </span>
              </div>
              <h1 className="text-4xl font-bold text-gray-900 mb-4">
                Create Your Account
              </h1>
              <p className="text-gray-600">
                Register to participate in the National Technical Symposium and access exclusive content.
              </p>
            </div>
            
            <div className="max-w-md mx-auto animate-fade-in opacity-0" style={{ animationDelay: '0.4s', animationFillMode: 'forwards' }}>
              <RegisterForm />
            </div>
          </div>
        </section>
      </main>
      
      <Footer />
    </div>
  );
};

export default Register



































db.js




const mongoose = require('mongoose');

const MONGO_URI = 'mongodb://127.0.0.1:27017/event_db'; // MongoDB URL

// Connect to MongoDB
mongoose.connect(MONGO_URI)
    .then(() => console.log("✅ Connected to MongoDB"))
    .catch(err => console.error("❌ MongoDB Connection Error:", err))
    .finally(() => console.log("🔄 MongoDB Connection Attempt Finished"));

// Define User Schema
const userSchema = new mongoose.Schema({
    name: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true }, // Store plain text password (Not recommended)
    created_at: { type: Date, default: Date.now } // Default timestamp
});

// Create User Model
const User = mongoose.model('User', userSchema);

module.exports = { mongoose, User };





server.js


require('dotenv').config();
const express = require('express');
const cors = require('cors');
const { mongoose, User } = require('./db'); // Import MongoDB connection and User model

const app = express();
app.use(cors());
app.use(express.json()); // Middleware to parse JSON

// ✅ Test route to check if server is running
app.get('/', (req, res) => {
  res.json({ message: "🎉 API is running!" });
});

// 📝 User Registration Route
app.post('/register', async (req, res) => {
  const { name, email, password, confirmPassword } = req.body;

  // Validate input fields
  if (!name || !email || !password || !confirmPassword) {
    return res.status(400).json({ error: 'All fields are required' });
  }

  // Validate email format
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!emailRegex.test(email)) {
    return res.status(400).json({ error: 'Invalid email format' });
  }

  // Check if passwords match
  if (password !== confirmPassword) {
    return res.status(400).json({ error: 'Passwords do not match' });
  }

  // Validate password strength (minimum 6 characters)
  if (password.length < 6) {
    return res.status(400).json({ error: 'Password must be at least 6 characters long' });
  }

  try {
    // Check if email already exists
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ error: 'Email is already registered' });
    }

    // Create new user (no password hashing)
    const newUser = new User({ name, email, password });
    await newUser.save();

    res.status(201).json({ message: '✅ Registration successful' });
  } catch (err) {
    console.error("❌ Error inserting user:", err);
    res.status(500).json({ error: 'Server error, please try again later' });
  }
});

// 📝 Get Users Route
app.get("/users", async (req, res) => {
  try {
    const users = await User.find({}, "email password"); // Fetch only email & password
    res.json(users);
  } catch (err) {
    res.status(500).json({ message: "Database error", error: err.message });
  }
});

// 🏃 Start Server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`🚀 Server running on port ${PORT}`);
});











